import { fileURLToPath } from 'node:url';
import { writeFile, readFile } from 'node:fs/promises';
import path from 'node:path';
import fg from 'fast-glob';
import format from '$lib/format-code';

type FontIndex = Record<string, FontData>;

type FontData = {
	path: string;
	family: string;
	weights: number[];
	subsets: string[];
	styles: string[];
	defaultSubset: string;
};

const __filename = fileURLToPath(import.meta.url);
const isEntryFile = process.argv?.[1] === __filename;
const currentDirectory = path.dirname(fileURLToPath(import.meta.url));

const getPath = (p: string) => {
	return path.dirname(p).replace('node_modules/', '');
};

if (isEntryFile) {
	const fonts = await fg.glob('node_modules/**/@fontsource/**/metadata.json');

	const fontData = await Promise.all(
		fonts.map((font) =>
			readFile(font, 'utf-8').then((file) => {
				const {
					family,
					variants,
					weights,
					subsets,
					defSubset: defaultSubset,
					styles,
				} = JSON.parse(file);

				return {
					path: getPath(font),
					family,
					variants,
					weights,
					subsets,
					defaultSubset,
					styles,
				} as FontData;
			}),
		),
	);

	const fontIndex = fontData.reduce((acc, font) => {
		const [, family] = font.path.split('/');
		acc[family] = font;
		return acc;
	}, {} as FontIndex);

	const content = `
		/* 
		 * This code has been generated by src/lib/fonts/generate.ts.
		 * Do not edit this file directly.
		 */

		export const fonts = ${JSON.stringify(fontIndex)} as const;

		export type Fonts = typeof fonts;
	`;

	const formatted = await format(content);

	writeFile(path.resolve(currentDirectory, './fonts.ts'), formatted);
} else {
	throw new Error('This file should not be imported.');
}
